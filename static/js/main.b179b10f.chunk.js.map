{"version":3,"sources":["nophoto.svg","logo.svg","components/Loading.js","components/CastProfile.js","components/GenreResults.js","components/Header.js","components/MovieDetails.js","components/SimilarMovies.js","components/Cast.js","components/Videos.js","components/MoviePage.js","components/SearchError.js","components/SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loading","react_default","a","createElement","castProfile","path","this","props","location","pathname","castId","slice","indexOf","onMount","prevProps","prevPath","currentCastId","window","scrollTo","bioData","castName","undefined","filmography","map","movie","index","Link","to","concat","id","key","poster_path","src","alt","original_title","release_date","substring","birthday","deathday","bio","castPhoto_path","name","Component","GenreResults","genreId","currentPath","prevGenreId","currentGenreId","numberOfResults","results","searchResults","Header","e","preventDefault","input","value","history","push","onSearch","userInput","_this","className","logo","onSubmit","type","ref","htmlFor","movieDetails","movieData","data","nophoto","title","tagline","budget","toLocaleString","revenue","runtime","genres","genre","overview","SimilarMovies","similarMovies","similarMovieData","lib_default","speed","slidesToShow","slidesToScroll","responsive","breakpoint","settings","infinite","Cast","cast","castData","profile_path","character","Videos","videos","videoData","video","url","frameBorder","MoviePage","movieId","currentMovieId","MovieDetails_movieDetails","Cast_Cast","SimilarMovies_SimilarMovies","Videos_Videos","SearchError","SearchResults","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchTerm","_this2","setState","document","body","style","backgroundImage","axios","get","then","res","total_results","_this3","_this4","all","spread","biography","_this5","details","backdrop_path","innerWidth","_this6","_this$state","BrowserRouter","basename","Route","exact","render","Redirect","Header_Header","assign","getSearchResults","SearchResults_SearchResults","onSelectMovie","getMovieById","component","GenreResults_GenreResults","getMoviesByGenre","MoviePage_MoviePage","CastProfile_castProfile","getCastProfile","Boolean","hostname","match","ReactDOM","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b179b10f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nophoto.76ebd871.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.439f390c.svg\";","import React from 'react'\n\n\nexport default function Loading() {\n\n\treturn ( <h1>Page is Loading...</h1> )\n\t\n}","import React, { Component } from 'react'\nimport Loading from './Loading'\nimport { Link } from 'react-router-dom'\n\n\nexport default class castProfile extends Component {\n\n    // Pulls castID from Router path and calls getCastProfile() in App.js\n    componentDidMount() {\n\n        const path = this.props.location.pathname\n        const castId = path.slice(6, path.indexOf('-'))\n        this.props.onMount(castId)\n\n    }\n\n    // If navigating from movie page to movie page, allows component to reset.\n    componentDidUpdate(prevProps) {\n\n        const path = this.props.location.pathname\n        const prevPath = prevProps.location.pathname\n\n        const currentCastId = path.slice(6, path.indexOf('-'))\n        const prevCastId = prevPath.slice(6, prevPath.indexOf('-'))\n\n        if (prevCastId !== currentCastId) {\n\n            this.props.onMount(currentCastId)\n\n        }\n\n        // Scrolls back to top of page, otherwise components re-renders in place.\n        window.scrollTo(0, 0)\n    }\n\n    render() {\n\n        // Shows loading while AJAX calls are made.\n        if (this.props.bioData.castName === null || this.props.filmography === undefined) {\n            return <Loading />\n        }\n\n        const filmography = this.props.filmography.map((movie, index) => (\n\n            <Link to={`/movie/${movie.id}`} key={index}>\n                <div>\n                    <div>{ (movie.poster_path === null) ? (<img src={'https://secure.hmepowerweb.com/Resources/Images/NoImageAvailableLarge.jpg'} alt='no poster found' />) : (<img src={`https://image.tmdb.org/t/p/w1280/${movie.poster_path}`} alt={ movie.original_title } />) }</div>\n                    <h4>{movie.original_title}</h4>\n                    <h5>{movie.release_date.substring(0,4)}</h5>\n                </div>\n            </Link>\n\n        ))\n\n\n        return ( \n\n            <div>\n                <h1>{ this.props.bioData.castName }</h1>\n                <p>Date of Birth: { this.props.bioData.birthday }</p>\n                { (this.props.bioData.deathday === null) ? (null) : (<p>Date of Death: { this.props.bioData.deathday }</p>) }\n                <p>{ this.props.bioData.bio }</p>\n                { (this.props.bioData.castPhoto_path === null) ? (<img src={'https://secure.hmepowerweb.com/Resources/Images/NoImageAvailableLarge.jpg'} alt='no poster found' />) : (<img src={`https://image.tmdb.org/t/p/w1280/${this.props.bioData.castPhoto_path}`} alt={this.props.bioData.name} />) }\n                { filmography }\n            </div>\n\n        )\n    }\n}","import React, { Component } from 'react'\nimport Loading from './Loading'\nimport { Link } from 'react-router-dom'\n\nexport default class GenreResults extends Component {\n\n    // Pulls genreID from Router path and calls getMoviesByGenre() in App.js\n    componentDidMount() {\n\n        const path = this.props.location.pathname\n        const genreId = path.slice(7, path.indexOf('-'))\n        this.props.onMount(genreId)\n\n    }\n\n    // If navigating from movie page to move page, allows component to reset.\n    componentDidUpdate(prevProps) {\n\n        const currentPath = this.props.location.pathname\n        const prevPath = prevProps.location.pathname\n        const prevGenreId = prevPath.slice(7, prevPath.indexOf('-'))\n        const currentGenreId = currentPath.slice(7, currentPath.indexOf('-'))\n\n        if (prevGenreId !== currentGenreId) {\n\n            this.props.onMount(currentGenreId)  \n                     \n        }\n    }\n\n    render() {\n\n        // Shows loading while AJAX calls complete\n        if (this.props.numberOfResults === 0) {\n\n            return <Loading />\n\n        }\n\n        const results = this.props.searchResults.map((movie, index) => (\n\n            <Link to={`/movie/${movie.id}`} key ={index}>\n                <div>\n                    { (movie.poster_path === null) ? (<img src={'https://secure.hmepowerweb.com/Resources/Images/NoImageAvailableLarge.jpg'} alt='no poster found' />) : (<img src={`https://image.tmdb.org/t/p/w1280/${movie.poster_path}`} alt={movie.original_title} />) }\n                    <h4>{movie.original_title}</h4>\n                    <h5>{movie.release_date.substring(0,4)}</h5>\n                </div>\n            </Link>\n\n        ))\n\n        return (\n        <section id=\"results\">\n            <p>{ `Your search returned ${ this.props.numberOfResults } results.` }</p>\n            {results}\n        </section>\n        )\n    }\n\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport logo from '../logo.svg'\nimport './Header.css'\n\nexport default class Header extends Component {\n\n    onSubmit(e) {\n        e.preventDefault()\n        // Return error message if no search term is added.\n        if (this.input.value === \"\") {\n\n            this.props.history.push('/searcherror')\n\n        } else {\n\n            if (this.props.onSearch) {\n\n                const userInput = this.input.value\n\n                // Calls getSearchResults() in App. js\n                this.props.onSearch(userInput)\n\n            }\n\n            // Route to results page\n            this.props.history.push('/results')\n\n            // Reset input\n            this.input.value = ''\n\n        }\n    }\n\n    render() {\n\n        return (\n            <header className=\"App-header\">\n                <Link to=\"/movie/369972\" className=\"logo-link\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></Link>\n                <form className=\"search-form\" onSubmit={ e => this.onSubmit(e) }>\n                    <input type=\"text\" name=\"userInput\" ref={ input => (this.input = input) } />\n                    <span className=\"search-bar\"></span>\n                    <label htmlFor=\"userInput\">Enter a movie title...</label>\n                    <button className=\"search-button\"></button>\n                </form>\n                <hr />\n            </header>\n        )\n    }\n\n}\n\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport nophoto from '../nophoto.svg'\n\nexport default class movieDetails extends Component {\n\n\n    render() {\n\n        const movieData = this.props.data\n\n        return (\n\n            <div className=\"movie\">\n\t\t\t\t{ (movieData.poster_path === null) ? (<img className=\"movie-page-poster\" src={nophoto} alt='no poster found' />) : (<img className=\"movie-page-poster\" src={`https://image.tmdb.org/t/p/w1280/${movieData.poster_path}`} alt={movieData.original_title} />) }\n\t\t\t\t\t<div className=\"movie-data\">\n\t\t\t\t\t\t<div className=\"movie-headline\">\n\t\t\t\t\t\t\t<h1>{movieData.title} ({movieData.release_date.substring(0,4)})</h1>\n\t\t\t\t\t\t\t<h4>{movieData.tagline}</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"movie-details\">\n\t\t\t\t\t\t<p><strong>Budget</strong><br />${movieData.budget.toLocaleString()}</p>\n\t\t\t\t\t\t<p><strong>Revenue</strong><br />${movieData.revenue.toLocaleString()}</p>\n\t\t\t\t\t\t<p><strong>Runtime</strong><br />{movieData.runtime} minutes</p>\n\t\t\t\t\t\t<div className=\"genres\"><p><strong>Genres</strong><br />\n\t\t\t\t\t\t\t\t{movieData.genres.map((genre, index) => (\n\t\t\t\t\t\t\t\t<span key={index} className=\"genre-link\"><Link to={`/genre/${genre.id}-${genre.name}`}>{genre.name}</Link> </span>   \n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</p></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"movie-plot\">\n\t\t\t\t\t\t\t<p><strong>Plot</strong><br />{movieData.overview}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\t\n\t\t\t</div>\n\n        )\n    }\n\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Slider from 'react-slick'\nimport nophoto from '../nophoto.svg'\n\nexport default class SimilarMovies extends Component {\n\n    render() {\n        const similarMovies = this.props.similarMovieData.map((movie, index) => (\n        <div key={index} className=\"similar-movie-container\">\n            <Link to={`/movie/${movie.id}`}>\n                { (movie.poster_path === null) ? (<img className=\"similar-movie-nophoto\" src={nophoto} alt='no profile found' />) : (<img className=\"similar-movie-photo\" src={`https://image.tmdb.org/t/p/w1280/${movie.poster_path}`} alt={movie.original_title} />) }\n                <p className=\"similar-movie-title\">{movie.original_title} ({movie.release_date.substring(0,4)})</p>\n            </Link> \n        </div>\n        ))\n\n        const settings = {\n            className: 'slider-list',\n            speed: 1000,\n            slidesToShow: 5,\n            slidesToScroll: 4,\n            responsive: [{\n                    breakpoint: 1350,\n                    settings: {\n                        slidesToShow: 4,\n                        slidesToScroll: 4,\n                        infinite: true\n                    }\n                },\n                {\n                    breakpoint: 1000,\n                    settings: {\n                        slidesToShow: 3,\n                        slidesToScroll: 2,\n                        infinite: true\n                    }\n                },\n                {\n                    breakpoint: 768,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1,\n                        infinite: true\n                    }\n                }\n            ]\n        };\n\n        return (\n        <div className=\"similar-movies\">  \n        <h2>Similar Movies</h2>  \n            <Slider {...settings}>\n                {similarMovies}\n            </Slider>\n        </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Slider from \"react-slick\"\nimport nophoto from '../nophoto.svg'\n\nexport default class Cast extends Component {\n\n    render() {\n        const cast = this.props.castData.map((cast, index) => (\n        <div key={index} className=\"cast-container\">\n            <Link to={`/cast/${cast.id}-${cast.name}`}>\n                { (cast.profile_path === null) ? (<img className=\"cast-nophoto\" src={nophoto} alt='no profile found' />) : (<img className=\"cast-photo\" src={`https://image.tmdb.org/t/p/w1280/${cast.profile_path}`} alt={cast.name} />) }\n                <p className=\"actor\">{cast.name}</p>\n                <p className=\"character\">{cast.character}</p>\n            </Link> \n        </div>\n        ))\n\n\n        const settings = {\n            className: 'slider-list',\n            speed: 1000,\n            slidesToShow: 5,\n            slidesToScroll: 4,\n            responsive: [{\n                    breakpoint: 1350,\n                    settings: {\n                        slidesToShow: 4,\n                        slidesToScroll: 4,\n                        infinite: true\n                    }\n                },\n                {\n                    breakpoint: 1000,\n                    settings: {\n                        slidesToShow: 3,\n                        slidesToScroll: 2,\n                        infinite: true\n                    }\n                },\n                {\n                    breakpoint: 768,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1,\n                        infinite: true\n                    }\n                }\n            ]\n        };\n\n\n        return (\n            <div className=\"cast\">\n                <h2>Cast</h2>\n                <Slider {...settings}>\n                    {cast}\n                </Slider>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport Slider from \"react-slick\"\n\nexport default class Videos extends Component {\n\n    render() {\n        const videos = this.props.videoData.map((video, index) => {\n                const url = `https://www.youtube.com/embed/${video.key}`\n                return (\n                <div className=\"video-container\" key={index}>\n                    <iframe \n                    title={video.name}\n                    id=\"ytplayer\"\n                    type=\"text/html\"\n                    src= {url}\n                    frameBorder=\"0\">\n                    </iframe>\n                    <p>{video.name}</p>\n                </div>\n                )\n        })\n\n        const settings = {\n            className: 'video-list',\n            speed: 1000,\n            slidesToShow: 1,\n            slidesToScroll: 1,\n        }\n\n        return (    \n            <div className=\"videos\">\n                <h2>Trailers & Videos</h2>\n                <Slider {...settings}>\n                    {videos}\n                </Slider>\n\t\t\t</div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Loading from './Loading'\nimport MovieDetails from './MovieDetails'\nimport SimilarMovies from './SimilarMovies'\nimport Cast from './Cast'\nimport Videos from './Videos'\nimport './MoviePage.css'\n\nexport default class MoviePage extends Component {\n\n    // Pulls movieID from Router path and calls getCastProfile() in App.js\n    componentDidMount() {\n        const path = this.props.location.pathname\n        const movieId = path.slice(7)\n        this.props.onMount(movieId)\n    }\n\n    // If navigating from movie page to movie page, allows component to reset.\n    componentDidUpdate(prevProps) {  \n        const currentPath = this.props.location.pathname\n        const prevPath = prevProps.location.pathname\n        const currentMovieId = currentPath.slice(7)\n        const prevMovieId = prevPath.slice(7)\n\n        if (prevMovieId !== currentMovieId) {\n\n            this.props.onMount(currentMovieId)\n\n        }\n\n        // Scrolls back to top of page, otherwise components re-renders in place.\n        window.scrollTo(0, 0)\n    }\n\n    render() {\n        const data = this.props.data\n        const castData = this.props.data.cast\n        const similarMovieData = this.props.data.similarMovies\n        const videoData = this.props.data.videos\n\n        if (!data.title) {\n\n            return <Loading />\n\n        }\n\n        return (\n            <div className=\"movie-container\">\n                <MovieDetails data={ data } />\n                <Cast castData={ castData }/>\n                <SimilarMovies similarMovieData={ similarMovieData } />\n                <Videos videoData={ videoData }/>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nfunction SearchError() {\n    return (\n        <p>Please enter a search term.</p>\n    )\n}\n\nexport default SearchError","import React, { Component } from 'react'\nimport Loading from './Loading'\nimport { Link } from 'react-router-dom'\nimport './SearchResults.css'\nimport nophoto from '../nophoto.svg'\n\nexport default class SearchResults extends Component {\n\n    render() {\n\n        if (this.props.numberOfResults === 0) {\n            return <Loading />\n        }\n\n        const results = this.props.searchResults.map((movie, index) => (\n            <div className=\"movie-card\" key={index}>\n                <Link to={`/movie/${movie.id}`}>\n                { (movie.poster_path === null) ? (<img className=\"results-no-poster\" src={nophoto} alt='no poster found' />) : (<img className=\"results-poster\" src={`https://image.tmdb.org/t/p/w1280/${movie.poster_path}`} alt={movie.original_title} />) }\n                <div className=\"movie-search-info\">\n                    <h1>{movie.original_title} ({movie.release_date.substring(0,4)})</h1>\n                    <p>{movie.overview}</p>\n                </div>\n                </Link>\n            </div>\n        ))\n\n        return (\n        <section id=\"results\" className=\"results\">\n            <div className=\"results-num\">\n                <p>{ `Your search returned ${ this.props.numberOfResults } results.` }</p>\n            </div>\n            {results}\n        </section>\n        )\n    }\n\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'\nimport CastProfile from './components/CastProfile'\nimport GenreResults from './components/GenreResults'\nimport Header from './components/Header'\nimport MoviePage from './components/MoviePage'\nimport SearchError from './components/SearchError'\nimport SearchResults from './components/SearchResults'\n\nexport default class App extends Component {\n    constructor(props) {\n\n        super(props)\n\n        this.state = {\n            numberOfResults: 0,\n            searchResults: []\n        }\n    }\n\n    getSearchResults(searchTerm) {\n        // Reset state before AJAX call. Prevents page loading with what was in component previously before displaying new content.\n        this.setState({\n            numberOfResults: 0,\n            searchResults: []\n        })\n\n        // Remove movie-specific background image\n        document.body.style.backgroundImage = ''\n\n        // AJAX call searching via movie title.\n        axios.get(`https://api.themoviedb.org/3/search/movie?api_key=8541c092938098d21b11f58a14dd114e&language=en&query=${searchTerm}`)\n            .then(res => {\n                this.setState({\n                    numberOfResults: res.data.total_results,\n                    searchResults: res.data.results,\n                })\n            })\n    }\n\n    getMoviesByGenre(genreId) {\n\n        // Reset state before AJAX call. Prevents page loading with what was in component previously before displaying new content.\n        this.setState({\n            numberOfResults: 0\n        })\n\n        // Remove movie-specific background image\n        document.body.style.backgroundImage = ''\n\n        // AJAX searching movies by genre. Returns movies with >5000 votes on TMDb sorted by vote average \n        axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=8541c092938098d21b11f58a14dd114e&sort_by=vote_average.desc&include_adult=false&include_video=false&language=en-US&page=1&vote_count.gte=5000&with_genres=${genreId}`)\n            .then(res => {\n                this.setState({\n                    numberOfResults: res.data.total_results,\n                    searchResults: res.data.results,\n                })\n            })\n    }\n\n    getCastProfile(castId) {\n\n        // Reset state before AJAX call. Prevents page loading with what was in component previously before displaying new content.\n        this.setState({\n            castName: null\n        })\n\n        // Remove movie-specific background image\n        document.body.style.backgroundImage = ''\n\n        // AJAX searching by cast ID. Returns movie they appeared in sorted by release date (newest => oldset)\n        function getFilmography() {\n            return axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=8541c092938098d21b11f58a14dd114e&language=en-US&sort_by=release_date.desc&include_adult=false&include_video=false&page=1&with_cast=${castId}&with_original_language=en`)\n        }\n\n        // AJAX searching for bio by cast ID.\n        function getBio() {\n            return axios.get(`https://api.themoviedb.org/3/person/${castId}?api_key=8541c092938098d21b11f58a14dd114e&language=en-US`)\n        }\n\n        axios.all([getFilmography(), getBio()])\n            .then(axios.spread((filmography, bio) => {\n                this.setState({\n                    numberOfResults: filmography.data.total_results,\n                    filmography: filmography.data.results,\n                    castId: bio.data.id,\n                    birthday: bio.data.birthday,\n                    deathday: bio.data.deathday,\n                    castName: bio.data.name,\n                    bio: bio.data.biography,\n                    castPhoto_path: bio.data.profile_path\n                })\n            }))\n    }\n\n    // Retrives movie infomation, cast, videos, and similar movies.\n    getMovieById(id) {\n        function getMovieDetails() {\n            return axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=8541c092938098d21b11f58a14dd114e&language=en-US`)\n        }\n\n        function getMovieCast() {\n            return axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=8541c092938098d21b11f58a14dd114e&language=en-US`)\n\n        }\n\n        function getVideos() {\n            return axios.get(`https://api.themoviedb.org/3/movie/${id}/videos?api_key=8541c092938098d21b11f58a14dd114e&language=en-US`)\n\n        }\n\n        function getSimilarMovies() {\n            return axios.get(`https://api.themoviedb.org/3/movie/${id}/similar?api_key=8541c092938098d21b11f58a14dd114e&language=en-US`)\n\n        }\n\n        // Reset state before AJAX call. Prevents page loading with what was in component previously before displaying new content.\n        this.setState({\n            title: null\n        })\n\n        axios.all([getMovieDetails(), getMovieCast(), getVideos(), getSimilarMovies()])\n            .then(axios.spread((details, cast, videos, similarMovies) => {\n                this.setState({\n                    searchResults: [],\n                    movieId: details.data.id,\n                    title: details.data.original_title,\n                    poster_path: details.data.poster_path,\n                    backdrop_path: details.data.backdrop_path,\n                    budget: details.data.budget,\n                    revenue: details.data.revenue,\n                    genres: details.data.genres,\n                    overview: details.data.overview,\n                    tagline: details.data.tagline,\n                    release_date: details.data.release_date,\n                    runtime: details.data.runtime,\n                    cast: cast.data.cast,\n                    videos: videos.data.results,\n                    similarMovies: similarMovies.data.results\n                })\n\n                if (window.innerWidth > 910) {\n                    document.body.style.backgroundImage = `url('https://image.tmdb.org/t/p/original${details.data.backdrop_path}`\n                }\n\n            }))\n    }\n\n\n    render() {\n        const { searchResults, numberOfResults, filmography } = this.state\n        return (\n            <Router basename=\"/movie-search\">\n            <main className=\"App\" >\n                <Route exact path=\"/\" render={ location => (location.pathname === window.location.pathname) ? null : (<Redirect to=\"/movie/369972\" />) } />\n                <Route path=\"/\" render={ props => <Header onSearch={searchTerm => this.getSearchResults(searchTerm)} {...props}/> } />\n                <Route exact path=\"/results\" render={ props => <SearchResults searchResults={searchResults} numberOfResults={numberOfResults} onSelectMovie={id => this.getMovieById(id)} {...props}/> } />\n                <Route exact path=\"/searcherror\" component={ SearchError } />\n                <Route exact path=\"/genre/:id-:name\" render={ props => <GenreResults searchResults={ searchResults } numberOfResults={ numberOfResults } onMount={ genreId => this.getMoviesByGenre(genreId) } {...props} /> } />\n                <Route exact path=\"/movie/:id\" render={ props => <MoviePage data={ this.state } onMount={ id => this.getMovieById(id)} {...props}/> } />\n                <Route exact path=\"/cast/:id-:name\" render={ props => <CastProfile filmography={ filmography } bioData={ this.state } onMount={ id => this.getCastProfile(id) } {...props}/> } />\n            </main>\n            </Router>\n        )\n    }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />, document.getElementById('root'))\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}