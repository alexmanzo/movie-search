{"version":3,"sources":["nophoto.svg","logo.svg","components/Loading.js","components/CastProfile.js","components/GenreResults.js","components/Header.js","components/MovieDetails.js","components/SimilarMovies.js","components/Cast.js","components/Videos.js","components/MoviePage.js","components/SearchError.js","components/SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loading","react_default","a","createElement","className","castProfile","path","this","props","location","pathname","castId","slice","indexOf","onMount","prevProps","prevPath","currentCastId","window","scrollTo","bioData","castName","undefined","filmography","map","movie","index","key","Link","to","concat","id","poster_path","src","nophoto","alt","original_title","release_date","substring","castPhoto_path","name","birthday","dist_default","format","deathday","bio","lib_default","speed","slidesToShow","slidesToScroll","responsive","breakpoint","settings","infinite","Component","GenreResults","genreId","currentPath","prevGenreId","currentGenreId","numberOfResults","results","searchResults","overview","Header","e","preventDefault","input","value","history","push","onSearch","userInput","_this","logo","onSubmit","type","ref","htmlFor","movieDetails","movieData","data","title","tagline","budget","toLocaleString","revenue","runtime","genres","genre","SimilarMovies","similarMovies","similarMovieData","Cast","cast","castData","profile_path","character","Videos","videos","videoData","video","url","frameBorder","MoviePage","movieId","currentMovieId","MovieDetails_movieDetails","Cast_Cast","length","SimilarMovies_SimilarMovies","Videos_Videos","SearchError","SearchResults","require","config","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","apiKey","process","searchTerm","setState","document","body","style","backgroundImage","axios","get","res","searching","total_results","console","log","_context","t0","components_SearchError","_context2","t4","getFilmography","getBio","Promise","all","biography","_context3","getMovieDetails","getMovieCast","getVideos","getSimilarMovies","details","backdrop_path","innerWidth","_context4","_this2","_this$state","BrowserRouter","basename","Route","exact","render","Redirect","Header_Header","assign","getSearchResults","SearchResults_SearchResults","onSelectMovie","getMovieById","component","GenreResults_GenreResults","getMoviesByGenre","MoviePage_MoviePage","CastProfile_castProfile","getCastProfile","Boolean","hostname","match","ReactDOM","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1ec6e87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nophoto.76ebd871.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.439f390c.svg\";","import React from 'react'\n\n\nexport default function Loading() {\n\n\treturn ( <h1 className=\"loading\">Page is Loading...</h1> )\n\t\n}","import React, { Component } from 'react'\nimport Slider from \"react-slick\"\nimport Moment from 'react-moment'\nimport Loading from './Loading'\nimport nophoto from '../nophoto.svg'\nimport { Link } from 'react-router-dom'\nimport './CastProfile.css'\n\n\nexport default class castProfile extends Component {\n\n    // Pulls castID from Router path and calls getCastProfile() in App.js\n    componentDidMount() {\n\n        const path = this.props.location.pathname\n        const castId = path.slice(6, path.indexOf('-'))\n        this.props.onMount(castId)\n\n    }\n\n    // If navigating from movie page to movie page, allows component to reset.\n    componentDidUpdate(prevProps) {\n\n        const path = this.props.location.pathname\n        const prevPath = prevProps.location.pathname\n\n        const currentCastId = path.slice(6, path.indexOf('-'))\n        const prevCastId = prevPath.slice(6, prevPath.indexOf('-'))\n\n        if (prevCastId !== currentCastId) {\n\n            this.props.onMount(currentCastId)\n\n        }\n\n        // Scrolls back to top of page, otherwise components re-renders in place.\n        window.scrollTo(0, 0)\n    }\n\n    render() {\n\n        // Shows loading while AJAX calls are made.\n        if (this.props.bioData.castName === null || this.props.filmography === undefined) {\n            return <Loading />\n        }\n\n        const filmography = this.props.filmography.map((movie, index) => (\n            <div className=\"filmography-container\" key={index}>\n                <Link to={`/movie/${movie.id}`}>\n                    { (movie.poster_path === null) ? (<img className=\"filmography-no-photo\" src={nophoto} alt='generic filler' />) : (<img className=\"filmography-no-photo\" src={`https://image.tmdb.org/t/p/w1280/${movie.poster_path}`} alt={ movie.original_title } />) }\n                    <p className=\"filmography-title\">{movie.original_title}</p>\n                    <p className=\"filmography-year\">{movie.release_date.substring(0,4)}</p>\n                </Link>\n            </div>    \n\n        ))\n\n        const settings = {\n            className: 'filmography-list',\n            speed: 1000,\n            slidesToShow: 5,\n            slidesToScroll: 4,\n            responsive: [{\n                    breakpoint: 1350,\n                    settings: {\n                        slidesToShow: 4,\n                        slidesToScroll: 4,\n                        infinite: true\n                    }\n                },\n                {\n                    breakpoint: 1050,\n                    settings: {\n                        slidesToShow: 3,\n                        slidesToScroll: 2,\n                        infinite: true\n                    }\n                },\n                {\n                    breakpoint: 768,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1,\n                        infinite: true\n                    }\n                }\n            ]\n        }\n\n\n        return ( \n\n            <div className=\"profile-container\">\n                <div className=\"profile\">\n                    { (this.props.bioData.castPhoto_path === null) ? (<img className=\"no-profile-photo\" src={'https://secure.hmepowerweb.com/Resources/Images/NoImageAvailableLarge.jpg'} alt='no poster found' />) : (<img className=\"profile-photo\" src={`https://image.tmdb.org/t/p/w1280/${this.props.bioData.castPhoto_path}`} alt={this.props.bioData.name} />) }\n                    <div className=\"profileData\">\n                        <h1 className=\"profile-name\">{ this.props.bioData.castName }</h1>\n                        <div className=\"profile-details\">\n                            { (this.props.bioData.birthday === null) ? (null) : (<p><strong>Date of Birth:</strong><br /><Moment format=\"MMMM Do, YYYY\">{this.props.bioData.birthday}</Moment></p>) }\n                            { (this.props.bioData.deathday === null) ? (null) : (<p><strong>Date of Death:</strong><br /> { <Moment format=\"MMMM Do, YYYY\">{this.props.bioData.deathday}</Moment> }</p>) }\n                            <p><strong>Biography</strong><br />{ (this.props.bioData.bio === \"\") ? ('No biography available.') : (this.props.bioData.bio)  }</p>\n                        </div>\n                    </div>\n                </div>\n                <h2>Filmography</h2>\n                <Slider {...settings}>\n                    { filmography }\n                </Slider>\n            </div>\n\n        )\n    }\n}","import React, { Component } from 'react'\nimport Loading from './Loading'\nimport './SearchResults.css'\nimport { Link } from 'react-router-dom'\nimport nophoto from '../nophoto.svg'\n\nexport default class GenreResults extends Component {\n\n    // Pulls genreID from Router path and calls getMoviesByGenre() in App.js\n    componentDidMount() {\n\n        const path = this.props.location.pathname\n        const genreId = path.slice(7, path.indexOf('-'))\n        this.props.onMount(genreId)\n\n    }\n\n    // If navigating from movie page to move page, allows component to reset.\n    componentDidUpdate(prevProps) {\n\n        const currentPath = this.props.location.pathname\n        const prevPath = prevProps.location.pathname\n        const prevGenreId = prevPath.slice(7, prevPath.indexOf('-'))\n        const currentGenreId = currentPath.slice(7, currentPath.indexOf('-'))\n\n        if (prevGenreId !== currentGenreId) {\n\n            this.props.onMount(currentGenreId)  \n                     \n        }\n    }\n\n    render() {\n\n        // Shows loading while AJAX calls complete\n        if (this.props.numberOfResults === 0) {\n\n            return <Loading />\n\n        }\n\n        const results = this.props.searchResults.map((movie, index) => (\n            <div className=\"movie-card\" key={index}>\n                <Link to={`/movie/${movie.id}`}>\n                { (movie.poster_path === null) ? (<img className=\"results-no-poster\" src={nophoto} alt='no poster found' />) : (<img className=\"results-poster\" src={`https://image.tmdb.org/t/p/w1280/${movie.poster_path}`} alt={movie.original_title} />) }\n                <div className=\"movie-search-info\">\n                    <h1>{movie.original_title} ({movie.release_date.substring(0,4)})</h1>\n                    <p>{movie.overview}</p>\n                </div>\n                </Link>\n            </div>\n        ))\n\n        return (\n        <section id=\"results\" className=\"results\">\n            <p>{ `Your search returned ${ this.props.numberOfResults } results.` }</p>\n            {results}\n        </section>\n        )\n    }\n\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport logo from '../logo.svg'\nimport './Header.css'\n\nexport default class Header extends Component {\n\n    onSubmit(e) {\n        e.preventDefault()\n        // Return error message if no search term is added.\n        if (this.input.value === \"\") {\n\n            this.props.history.push('/searcherror')\n\n        } else {\n\n            if (this.props.onSearch) {\n\n                const userInput = this.input.value\n\n                // Calls getSearchResults() in App. js\n                this.props.onSearch(userInput)\n\n            }\n\n            // Route to results page\n            this.props.history.push('/results')\n\n            // Reset input\n            this.input.value = ''\n\n        }\n    }\n\n    render() {\n\n        return (\n            <header className=\"App-header\">\n                <Link to=\"/movie/369972\" className=\"logo-link\"><img src={logo} className=\"App-logo\" alt=\"logo\" /></Link>\n                <form className=\"search-form\" onSubmit={ e => this.onSubmit(e) }>\n                    <input type=\"text\" name=\"userInput\" ref={ input => (this.input = input) } />\n                    <span className=\"search-bar\"></span>\n                    <label htmlFor=\"userInput\">Enter a movie title...</label>\n                    <button className=\"search-button\"></button>\n                </form>\n                <hr />\n            </header>\n        )\n    }\n\n}\n\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport nophoto from '../nophoto.svg'\n\nexport default class movieDetails extends Component {\n\n\n    render() {\n\n        const movieData = this.props.data\n\n        return (\n\n            <div className=\"movie\">\n\t\t\t\t{ (movieData.poster_path === null) ? (<img className=\"movie-page-no-poster\" src={nophoto} alt='no poster found' />) : (<img className=\"movie-page-poster\" src={`https://image.tmdb.org/t/p/w1280/${movieData.poster_path}`} alt={movieData.original_title} />) }\n\t\t\t\t\t<div className=\"movie-data\">\n\t\t\t\t\t\t<div className=\"movie-headline\">\n\t\t\t\t\t\t\t<h1>{movieData.title} ({movieData.release_date.substring(0,4)})</h1>\n\t\t\t\t\t\t\t<h4>{movieData.tagline}</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"movie-details\">\n\t\t\t\t\t\t{ (movieData.budget === 0) ? (<p><strong>Budget</strong><br />N/A</p>) : (<p><strong>Budget</strong><br />${movieData.budget.toLocaleString()}</p>) }\n\t\t\t\t\t\t{ (movieData.revenue === 0) ? (<p><strong>Revenue</strong><br />N/A</p>) : (<p><strong>Revenue</strong><br />${movieData.revenue.toLocaleString()}</p>) }\n\t\t\t\t\t\t{ (movieData.runtime === null) ? (<p><strong>Runtime</strong><br />N/A</p>) : (<p><strong>Runtime</strong><br />{movieData.runtime} minutes</p>)}\n\t\t\t\t\t\t<div className=\"genres\"><p><strong>Genres</strong><br />\n\t\t\t\t\t\t\t\t{movieData.genres.map((genre, index) => (\n\t\t\t\t\t\t\t\t<span key={index} className=\"genre-link\"><Link to={`/genre/${genre.id}-${genre.name}`}>{genre.name}</Link> </span>   \n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</p></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"movie-plot\">\n\t\t\t\t\t\t\t<p><strong>Plot</strong><br />{movieData.overview}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\t\n\t\t\t</div>\n\n        )\n    }\n\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Slider from 'react-slick'\nimport nophoto from '../nophoto.svg'\n\nexport default class SimilarMovies extends Component {\n\n    render() {\n        const similarMovies = this.props.similarMovieData.map((movie, index) => (\n        <div key={index} className=\"similar-movie-container\">\n            <Link to={`/movie/${movie.id}`}>\n                { (movie.poster_path === null) ? (<img className=\"similar-movie-nophoto\" src={nophoto} alt='no profile found' />) : (<img className=\"similar-movie-photo\" src={`https://image.tmdb.org/t/p/w1280/${movie.poster_path}`} alt={movie.original_title} />) }\n                <p className=\"similar-movie-title\">{movie.original_title} ({movie.release_date.substring(0,4)})</p>\n            </Link> \n        </div>\n        ))\n\n        const settings = {\n            className: 'slider-list',\n            speed: 1000,\n            slidesToShow: 5,\n            slidesToScroll: 4,\n            responsive: [{\n                    breakpoint: 1350,\n                    settings: {\n                        slidesToShow: 4,\n                        slidesToScroll: 4,\n                        infinite: true\n                    }\n                },\n                {\n                    breakpoint: 1050,\n                    settings: {\n                        slidesToShow: 3,\n                        slidesToScroll: 2,\n                        infinite: true\n                    }\n                },\n                {\n                    breakpoint: 768,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1,\n                        infinite: true\n                    }\n                }\n            ]\n        };\n\n        return (\n        <div className=\"similar-movies\">  \n        <h2>Similar Movies</h2>  \n            <Slider {...settings}>\n                {similarMovies}\n            </Slider>\n        </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Slider from \"react-slick\"\nimport nophoto from '../nophoto.svg'\n\nexport default class Cast extends Component {\n\n    render() {\n        const cast = this.props.castData.map((cast, index) => (\n        <div key={index} className=\"cast-container\">\n            <Link to={`/cast/${cast.id}-${cast.name}`}>\n                { (cast.profile_path === null) ? (<img className=\"cast-nophoto\" src={nophoto} alt='no profile found' />) : (<img className=\"cast-photo\" src={`https://image.tmdb.org/t/p/w1280/${cast.profile_path}`} alt={cast.name} />) }\n                <p className=\"actor\">{cast.name}</p>\n                <p className=\"character\">{cast.character}</p>\n            </Link> \n        </div>\n        ))\n\n\n        const settings = {\n            className: 'slider-list',\n            speed: 1000,\n            slidesToShow: 5,\n            slidesToScroll: 4,\n            responsive: [{\n                    breakpoint: 1350,\n                    settings: {\n                        slidesToShow: 4,\n                        slidesToScroll: 4,\n                        infinite: true\n                    }\n                },\n                {\n                    breakpoint: 1050,\n                    settings: {\n                        slidesToShow: 3,\n                        slidesToScroll: 2,\n                        infinite: true\n                    }\n                },\n                {\n                    breakpoint: 768,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1,\n                        infinite: true\n                    }\n                }\n            ]\n        }\n\n\n        return (\n            <div className=\"cast\">\n                <h2>Cast</h2>\n                <Slider {...settings}>\n                    {cast}\n                </Slider>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport Slider from \"react-slick\"\n\nexport default class Videos extends Component {\n\n    render() {\n        const videos = this.props.videoData.map((video, index) => {\n                const url = `https://www.youtube.com/embed/${video.key}`\n                return (\n                <div className=\"video-container\" key={index}>\n                    <iframe \n                    title={video.name}\n                    id=\"ytplayer\"\n                    type=\"text/html\"\n                    src= {url}\n                    frameBorder=\"0\">\n                    </iframe>\n                    <p>{video.name}</p>\n                </div>\n                )\n        })\n\n        const settings = {\n            className: 'video-list',\n            speed: 1000,\n            slidesToShow: 1,\n            slidesToScroll: 1,\n        }\n\n        return (    \n            <div className=\"videos\">\n                <h2>Trailers & Videos</h2>\n                <Slider {...settings}>\n                    {videos}\n                </Slider>\n\t\t\t</div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Loading from './Loading'\nimport MovieDetails from './MovieDetails'\nimport SimilarMovies from './SimilarMovies'\nimport Cast from './Cast'\nimport Videos from './Videos'\nimport './MoviePage.css'\n\nexport default class MoviePage extends Component {\n\n    // Pulls movieID from Router path and calls getCastProfile() in App.js\n    componentDidMount() {\n        const path = this.props.location.pathname\n        const movieId = path.slice(7)\n        this.props.onMount(movieId)\n    }\n\n    // If navigating from movie page to movie page, allows component to reset.\n    componentDidUpdate(prevProps) {  \n        const currentPath = this.props.location.pathname\n        const prevPath = prevProps.location.pathname\n        const currentMovieId = currentPath.slice(7)\n        const prevMovieId = prevPath.slice(7)\n\n        if (prevMovieId !== currentMovieId) {\n\n            this.props.onMount(currentMovieId)\n\n        }\n\n        // Scrolls back to top of page, otherwise components re-renders in place.\n        window.scrollTo(0, 0)\n    }\n\n    render() {\n        const data = this.props.data\n        const castData = this.props.data.cast\n        const similarMovieData = this.props.data.similarMovies\n        const videoData = this.props.data.videos\n\n        if (!data.title) {\n\n            return <Loading />\n\n        }\n\n        return (\n            <div className=\"movie-container\">\n                <MovieDetails data={ data } />\n                <Cast castData={ castData }/>\n                { (similarMovieData.length === 0) ? (null) : (<SimilarMovies similarMovieData={ similarMovieData } /> )}\n                { (videoData.length === 0) ? (null) : (<Videos videoData={ videoData }/>) }\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nfunction SearchError() {\n    return (\n        <p>Something went wrong. Please enter a new search term.</p>\n    )\n}\n\nexport default SearchError","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport './SearchResults.css'\nimport nophoto from '../nophoto.svg'\n\nexport default class SearchResults extends Component {\n\n    render() {\n        const results = this.props.searchResults.map((movie, index) => (\n            <div className=\"movie-card\" key={index}>\n                <Link to={`/movie/${movie.id}`}>\n                { (movie.poster_path === null) ? (<img className=\"results-no-poster\" src={nophoto} alt='no poster found' />) : (<img className=\"results-poster\" src={`https://image.tmdb.org/t/p/w1280/${movie.poster_path}`} alt={movie.original_title} />) }\n                <div className=\"movie-search-info\">\n                    <h1>{movie.original_title} ({movie.release_date.substring(0,4)})</h1>\n                    <p>{movie.overview}</p>\n                </div>\n                </Link>\n            </div>\n        ))\n\n        return (\n        <section id=\"results\" className=\"results\">\n            <div className=\"results-num\">\n                <p>{ `Your search returned ${ this.props.numberOfResults } results.` }</p>\n            </div>\n            {results}\n        </section>\n        )\n    }\n\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'\nimport CastProfile from './components/CastProfile'\nimport GenreResults from './components/GenreResults'\nimport Header from './components/Header'\nimport MoviePage from './components/MoviePage'\nimport SearchError from './components/SearchError'\nimport SearchResults from './components/SearchResults'\nrequire('dotenv').config()\n\nexport default class App extends Component {\n    constructor(props) {\n\n        super(props)\n\n        this.state = {\n            apiKey: process.env.REACT_APP_API_KEY,\n            numberOfResults: 0,\n            searchResults: []\n        }\n    }\n    \n    async getSearchResults(searchTerm) {\n        // Reset state before AJAX call. Prevents page loading with what was in component previously before displaying new content.\n        this.setState({\n            numberOfResults: 0,\n            searchResults: []\n        })\n\n        // Remove movie-specific background image\n        document.body.style.backgroundImage = ''\n\n        // AJAX call searching via movie title.\n        const apiKey = this.state.apiKey\n        try {\n             let res = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en&query=${searchTerm}`)\n             this.setState({\n                searching: true,\n                numberOfResults: res.data.total_results,\n                searchResults: res.data.results,\n            })\n        } catch (err) {\n            console.log(err)\n            return <SearchError />\n        }\n\n    }\n\n    async getMoviesByGenre(genreId) {\n\n        // Reset state before AJAX call. Prevents page loading with what was in component previously before displaying new content.\n        this.setState({\n            numberOfResults: 0\n        })\n\n        // Remove movie-specific background image\n        document.body.style.backgroundImage = ''\n\n        // AJAX searching movies by genre. Returns movies with >5000 votes on TMDb sorted by vote average \n        const apiKey = this.state.apiKey\n        try {\n            let res = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&sort_by=vote_average.desc&include_adult=false&include_video=false&language=en-US&page=1&vote_count.gte=5000&with_genres=${genreId}`)\n            this.setState({\n                numberOfResults: await res.data.total_results,\n                searchResults: await res.data.results,\n            })\n        } catch (err) {\n            console.log(err)\n            return <SearchError />\n        }\n    }\n\n    async getCastProfile(castId) {\n\n        // Reset state before AJAX call. Prevents page loading with what was in component previously before displaying new content.\n        this.setState({\n            castName: null\n        })\n\n        // Remove movie-specific background image\n        document.body.style.backgroundImage = ''\n\n        // AJAX searching by cast ID. Returns movie they appeared in sorted by release date (newest => oldset)\n        const apiKey = this.state.apiKey\n        function getFilmography() {\n            return axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&sort_by=release_date.desc&include_adult=false&include_video=false&page=1&with_cast=${castId}&with_original_language=en`)\n        }\n\n        // AJAX searching for bio by cast ID.\n        function getBio() {\n            return axios.get(`https://api.themoviedb.org/3/person/${castId}?api_key=${apiKey}&language=en-US`)\n        }\n        \n        try {\n            const [filmography, bio] = await Promise.all([getFilmography(), getBio()])\n            this.setState({\n                numberOfResults: filmography.data.total_results,\n                filmography: filmography.data.results,\n                castId: bio.data.id,\n                birthday: bio.data.birthday,\n                deathday: bio.data.deathday,\n                castName: bio.data.name,\n                bio: bio.data.biography,\n                castPhoto_path: bio.data.profile_path\n            })\n        } catch (err) {\n            console.log(err)\n            return <SearchError />\n        }\n\n    }\n\n    // Retrives movie infomation, cast, videos, and similar movies.\n    async getMovieById(id) {\n        const apiKey = this.state.apiKey\n        function getMovieDetails() {\n            return axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}&language=en-US`)\n        }\n\n        function getMovieCast() {\n            return axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${apiKey}&language=en-US`)\n\n        }\n\n        function getVideos() {\n            return axios.get(`https://api.themoviedb.org/3/movie/${id}/videos?api_key=${apiKey}&language=en-US`)\n\n        }\n\n        function getSimilarMovies() {\n            return axios.get(`https://api.themoviedb.org/3/movie/${id}/similar?api_key=${apiKey}&language=en-US`)\n\n        }\n\n        // Reset state before AJAX call. Prevents page loading with what was in component previously before displaying new content.\n        this.setState({\n            title: null\n        })\n\n        try {\n            const [details, cast, videos, similarMovies] = await Promise.all([getMovieDetails(), getMovieCast(), getVideos(), getSimilarMovies()])\n            this.setState({\n                searchResults: [],\n                movieId: details.data.id,\n                title: details.data.original_title,\n                poster_path: details.data.poster_path,\n                backdrop_path: details.data.backdrop_path,\n                budget: details.data.budget,\n                revenue: details.data.revenue,\n                genres: details.data.genres,\n                overview: details.data.overview,\n                tagline: details.data.tagline,\n                release_date: details.data.release_date,\n                runtime: details.data.runtime,\n                cast: cast.data.cast,\n                videos: videos.data.results,\n                similarMovies: similarMovies.data.results\n            })\n            \n            if (window.innerWidth > 910) {\n                document.body.style.backgroundImage = `url('https://image.tmdb.org/t/p/original${details.data.backdrop_path}`\n            }\n        } catch (err) {\n            console.log(err)\n            return <SearchError / >\n        }\n\n\n        }\n\n    render() {\n        const { searchResults, numberOfResults, filmography } = this.state\n        return (\n            <Router basename=\"/movie-search\">\n            <main className=\"App\" >\n                <Route exact path=\"/\" render={ location => (location.pathname === window.location.pathname) ? null : (<Redirect to=\"/movie/369972\" />) } />\n                <Route path=\"/\" render={ props => <Header onSearch={searchTerm => this.getSearchResults(searchTerm)} {...props}/> } />\n                <Route exact path=\"/results\" render={ props => <SearchResults searchResults={searchResults} numberOfResults={numberOfResults} onSelectMovie={id => this.getMovieById(id)} {...props}/> } />\n                <Route exact path=\"/searcherror\" component={ SearchError } />\n                <Route exact path=\"/genre/:id-:name\" render={ props => <GenreResults searchResults={ searchResults } numberOfResults={ numberOfResults } onMount={ genreId => this.getMoviesByGenre(genreId) } {...props} /> } />\n                <Route exact path=\"/movie/:id\" render={ props => <MoviePage data={ this.state } onMount={ id => this.getMovieById(id)} {...props}/> } />\n                <Route exact path=\"/cast/:id-:name\" render={ props => <CastProfile filmography={ filmography } bioData={ this.state } onMount={ id => this.getCastProfile(id) } {...props}/> } />\n            </main>\n            </Router>\n        )\n    }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />, document.getElementById('root'))\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}